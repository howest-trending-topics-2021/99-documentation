openapi: 3.0.1
info:
  title: Clocker
  description: This is the API spec for the Clocker scheduling app.
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 0.1.0
tags:
- name: authentication
  description: Everything about login and registration
- name: department
  description: Everything about your department
- name: employee
  description: Everything about your employees
- name: schedule
  description: Everything about your schedules
paths:
  /authentication/register:
    post:
      tags:
      - authentication
      operationId: register
      parameters:
      - name: username
        schema:
          type: 'string'
        required: true
        in: header
      - name: email
        schema:
          type: 'string'
        required: true
        in: header
      - name: salt
        schema:
          type: 'string'
        required: true
        in: header
      - name: verifier
        schema:
          type: 'string'
        required: true
        in: header
      responses:
        200:
          description: successful registration
  /authentication/challenge:
    post:
      tags:
      - authentication
      operationId: challenge
      parameters:
      - name: email
        schema:
          type: 'string'
        required: true
        in: header
      responses:
        200:
          description: salt and B
          content:
            '*/*':
              schema:
                type: object
                properties:
                  salt:
                    type: string
                  B:
                    type: string
  /authentication/authenticate:
    post:
      tags:
      - authentication
      operationId: authenticate
      parameters:
      - name: A
        schema:
          type: 'string'
        required: true
        in: header
      - name: M1
        schema:
          type: 'string'
        required: true
        in: header
      responses:
        200:
          description: Succesfully authenticated
          content:
            '*/*':
              schema:
                $ref: '#/components/securitySchemes/bearerAuth'
  /department:
    get:
      tags:
      - department
      summary: Returns a list of all department
      operationId: getDepartment
      security:
      - bearerAuth: []
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Department'
    post:
      tags:
      - department
      security:
      - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/New_Department'
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Department'
  /department/{departmentId}:
    get:
      tags:
      - department
      summary: Returns an department based on it's Id.
      operationId: getDepartmentById
      security:
      - bearerAuth: []
      parameters:
      - name: departmentId
        in: path
        description: Id of department to return
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Department'
    put:
      tags:
      - department
      security:
      - bearerAuth: []
      parameters:
      - name: departmentId
        in: path
        description: Id of department to return
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/New_Department'
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Department'
    delete:
      tags:
      - department
      security:
      - bearerAuth: []
      parameters:
      - name: departmentId
        in: path
        description: Id of department to return
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Department'
  /department/{departmentId}/employee:
    get:
      tags:
      - employee
      summary: Returns a list of all employees
      operationId: getEmployees
      security:
      - bearerAuth: []
      parameters:
      - name: departmentId
        in: path
        description: Id of department to return
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Employee'
    post:
      tags:
      - employee
      security:
      - bearerAuth: []
      parameters:
      - name: departmentId
        in: path
        description: Id of department to return
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/New_Employee'
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee'
  /department/{departmentId}/employee/{employeeId}:
    get:
      tags:
      - employee
      summary: Returns an employee based on it's Id.
      operationId: getEmployeeById
      security:
      - bearerAuth: []
      parameters:
      - name: departmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: employeeId
        in: path
        description: Id of employee to return
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee'
    put:
      tags:
      - employee
      security:
      - bearerAuth: []
      parameters:
      - name: departmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: employeeId
        in: path
        description: Id of employee to return
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/New_Employee'
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee'
    delete:
      tags:
      - employee
      security:
      - bearerAuth: []
      parameters:
      - name: departmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: employeeId
        in: path
        description: Id of employee to return
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Employee'
  /department/{departmentId}/schedule:
    get:
      tags:
      - schedule
      summary: Returns a list of all schedules
      operationId: "getSchedules"
      security:
      - bearerAuth: []
      parameters:
      - name: departmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Schedule'
    post:
      tags:
      - schedule
      security:
      - bearerAuth: []
      parameters:
      - name: departmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/New_Schedule'
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Schedule'
  /department/{departmentId}/schedule/{scheduleId}:
    get:
      tags:
      - schedule
      summary: Returns an schedule based on it's id.
      security:
      - bearerAuth: []
      parameters:
      - name: departmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: "scheduleId"
        in: path
        description: Id of organisation to return
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      operationId: getScheduleById
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Schedule'
    put:
      tags:
      - schedule
      security:
      - bearerAuth: []
      parameters:
      - name: departmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: "scheduleId"
        in: path
        description: Id of organisation to return
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/New_Schedule'
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Schedule'
    delete:
      tags:
      - schedule
      security:
      - bearerAuth: []
      parameters:
      - name: departmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: "scheduleId"
        in: path
        description: Id of organisation to return
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Schedule'
  /department/{departmentId}/schedule/{scheduleId}/{weekId}:
    get:
      tags:
      - schedule
      summary: Returns a week based on it's id.
      security:
      - bearerAuth: []
      parameters:
      - name: departmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: "scheduleId"
        in: path
        description: Id of organisation to return
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: "weekId"
        in: path
        description: Id of organisation to return
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      operationId: getScheduleById
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Schedule'
    put:
      description: "update a week schedule"
      tags:
      - schedule
      security:
      - bearerAuth: []
      parameters:
      - name: departmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: "scheduleId"
        in: path
        description: Id of organisation to return
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Week'
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Schedule'
    post:
      description: "create a week schedule"
      tags:
      - schedule
      security:
      - bearerAuth: []
      parameters:
      - name: departmentId
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      - name: "scheduleId"
        in: path
        description: Id of organisation to return
        required: true
        schema:
          $ref: '#/components/schemas/Id'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/New_Week'
      responses:
        200:
          description: successful operation
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/Week'
components:
  schemas:
    Id:
      type: integer
      format: int64
    ErrorMessage:
      type: string
    Organisation:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
    Department:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        name:
          type: string
        employees:
          type: array
          items:
            $ref: '#/components/schemas/Employee'
    New_Department:
      type: object
      properties:
        name:
          type: string
    Employee:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        displayName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        hours:
          type: integer
        isManager:
          type: boolean
          default: false
    New_Employee:
      type: object
      properties:
        displayName:
          type: string
        firstName:
          type: string
        lastName:
          type: string
        email:
          type: string
          format: email
        isManager:
          type: boolean
          default: false
    Location:
      type: object
      properties:
        department_id:
          $ref: '#/components/schemas/Id'
        location_id:
          $ref: '#/components/schemas/Id'
        name:
         type: string
    New_Location:
      type: object
      properties:
        department_id:
          $ref: '#/components/schemas/Id'
        name:
         type: string
    Schedule_entry:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        strart:
          type: string
        end:
         type: string
        location:
          $ref: '#/components/schemas/Location'
    New_Schedule_Entry:
      type: object
      properties:
        strart:
          type: string
        end:
         type: string
        location:
          $ref: '#/components/schemas/Location'
    Week:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        meetings:
          type: array
          items:
            $ref: '#/components/schemas/Schedule_entry'
        logs:
          type: array
          items:
            $ref: '#/components/schemas/Schedule_entry'
    New_Week:
      type: object
      properties:
        meetings:
          type: array
          items:
            $ref: '#/components/schemas/Schedule_entry'
        logs:
          type: array
          items:
            $ref: '#/components/schemas/Schedule_entry'
    Schedule:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        user:
          $ref: '#/components/schemas/Employee'
        weeks:
          type: array
          items:
            $ref: '#/components/schemas/Week'
    New_Schedule:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/Employee'
        weeks:
          type: array
          items:
            $ref: '#/components/schemas/Week'
        
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
